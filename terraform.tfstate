{
  "version": 4,
  "terraform_version": "1.9.3",
  "serial": 1,
  "lineage": "90e3f272-c36b-5cb6-26bc-2d8b51858636",
  "outputs": {},
  "resources": [
    {
      "mode": "managed",
      "type": "harness_platform_policy",
      "name": "test",
      "provider": "provider[\"registry.terraform.io/harness/harness\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "description": "test1123",
            "git_base_branch": null,
            "git_branch": null,
            "git_commit_msg": null,
            "git_commit_sha": null,
            "git_connector_ref": null,
            "git_file_id": null,
            "git_import": null,
            "git_is_new_branch": null,
            "git_path": null,
            "git_repo": null,
            "id": "test1123",
            "identifier": "test1123",
            "name": "test1123",
            "org_id": "",
            "project_id": "",
            "rego": "package pipeline\n            \n# Deny pipelines that don't have an approval step\n# NOTE: Try removing the HarnessApproval step from your input to see the policy fail\ndeny[msg] {\n    # Find all stages that are Deployments ...\n    input.pipeline.stages[i].stage.type == \"Approval\"\n            \n    # ... that are not in the set of stages with HarnessApproval steps\n    not stages_with_approval[i]\n            \n    # Show a human-friendly error message\n    msg := sprintf(\"Approval stage '%s' does not have a HarnessApproval step\", [input.pipeline.stages[i].stage.name])\n}\n            \n# Find the set of stages that contain a HarnessApproval step\nstages_with_approval[i] {\n    input.pipeline.stages[i].stage.spec.execution.steps[_].step.type == \"HarnessApproval\"\n}\n",
            "tags": null
          },
          "sensitive_attributes": [],
          "private": "bnVsbA=="
        }
      ]
    }
  ],
  "check_results": null
}
